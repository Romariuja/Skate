// Compiled shader for PC, Mac & Linux Standalone

//////////////////////////////////////////////////////////////////////////
// 
// NOTE: This is *not* a valid shader file, the contents are provided just
// for information and for debugging purposes only.
// 
//////////////////////////////////////////////////////////////////////////
// Skipping shader variants that would not be included into build of current scene.

Shader "Particles/Alpha Blended Premultiply" {
Properties {
 _MainTex ("Particle Texture", 2D) = "white" { }
 _InvFade ("Soft Particles Factor", Range(0.010000,3.000000)) = 1.000000
}
SubShader { 
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" "PreviewType"="Plane" }


 // Stats for Vertex shader:
 //         d3d9: 14 avg math (11..18)
 //        d3d11: 13 avg math (9..18)
 // Stats for Fragment shader:
 //         d3d9: 7 avg math (6..9), 1 avg texture (1..2)
 //        d3d11: 5 avg math (2..8), 1 avg texture (1..2)
 Pass {
  Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" "PreviewType"="Plane" }
  ZWrite Off
  Cull Off
  Blend One OneMinusSrcAlpha
  ColorMask RGB
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
No keywords set in this variant.
-- Vertex shader for "d3d9":
// Stats: 11 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Vector4 _MainTex_ST at 8

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   _MainTex_ST         c8       1
//

    vs_2_0
    def c9, 1, 0, 0, 0
    dcl_position v0
    dcl_color v1
    dcl_texcoord v2
    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r2.x, c4, r1
    dp4 r2.y, c5, r1
    dp4 r2.z, c6, r1
    dp4 r2.w, c7, r1
    mad oT0.xy, v2, c8, c8.zwzw
    mov oD0, v1
    mad oPos.xy, r2.w, c255, r2
    mov oPos.zw, r2

// approximately 13 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 6 math, 1 textures
Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   sampler2D _MainTex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   _MainTex     s0       1
//

    ps_2_0
    dcl v0
    dcl t0.xy
    dcl_2d s0
    texld r0, t0, s0
    mov r1.w, v0.w
    mov r1.xyz, r0
    mul r1, r1, v0
    mov r0.xyz, v0.w
    mul_pp r0, r0, r1
    mov_pp oC0, r0

// approximately 7 instruction slots used (1 texture, 6 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 9 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (80 bytes) on slot 0 {
  Vector4 _MainTex_ST at 48
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
}
Constant Buffer "UnityPerFrame" (384 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
      vs_4_0
      dcl_constantbuffer CB0[4], immediateIndexed
      dcl_constantbuffer CB1[4], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xyzw
      dcl_input v2.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r0.xyzw, r0.xyzw, cb1[3].xyzw
   4: mul r1.xyzw, r0.yyyy, cb2[18].xyzw
   5: mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
   6: mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
   7: mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
   8: mov o1.xyzw, v1.xyzw
   9: mad o2.xy, v2.xyxx, cb0[3].xyxx, cb0[3].zwzz
  10: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 2 math, 1 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyzw, r0.xyzw, v1.xyzw
   2: mul o0.xyzw, r0.xyzw, v1.wwww
   3: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Keywords set in this variant: SOFTPARTICLES_ON 
-- Vertex shader for "d3d9":
// Stats: 18 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"

Matrix4x3 unity_MatrixV at 8
Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Vector4 _MainTex_ST at 12
Vector4 _ProjectionParams at 11

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   float4 _ProjectionParams;
//   row_major float4x4 unity_MatrixV;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   unity_MatrixV       c8       3
//   _ProjectionParams   c11      1
//   _MainTex_ST         c12      1
//

    vs_2_0
    def c13, 1, 0, 0.5, 0
    dcl_position v0
    dcl_color v1
    dcl_texcoord v2
    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r3.z, c6, r1
    dp4 r0.x, c4, r1
    dp4 r0.w, c7, r1
    dp4 r0.y, c5, r1
    dp4 r0.z, c10, r1
    mov oT1.z, -r0.z
    mul r0.z, r0.y, c11.x
    mov r3.xyw, r0
    mov oT1.w, r0.w
    mul r2.xzw, r0.xywz, c13.z
    add oT1.xy, r2.z, r2.xwzw
    mad oT0.xy, v2, c12, c12.zwzw
    mov oD0, v1
    mad oPos.xy, r3.w, c255, r3
    mov oPos.zw, r3

// approximately 20 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 9 math, 2 textures
Float _InvFade at 1
Vector4 _ZBufferParams at 0

Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_CameraDepthTexture" to slot 1

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   sampler2D _CameraDepthTexture;
//   float _InvFade;
//   sampler2D _MainTex;
//   float4 _ZBufferParams;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   _ZBufferParams      c0       1
//   _InvFade            c1       1
//   _MainTex            s0       1
//   _CameraDepthTexture s1       1
//

    ps_2_0
    dcl v0
    dcl t0.xy
    dcl t1
    dcl_2d s0
    dcl_2d s1
    texldp r0, t1, s1
    texld r1, t0, s0
    mad r0.x, c0.z, r0.x, c0.w
    rcp r0.x, r0.x
    add r0.x, r0.x, -t1.z
    mul_sat r0.x, r0.x, c1.x
    mul_pp r0.w, r0.x, v0.w
    mov r0.xyz, v0
    mul r1, r1, r0
    mul_pp r0, r0.w, r1
    mov_pp oC0, r0

// approximately 11 instruction slots used (2 texture, 9 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 18 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (80 bytes) on slot 0 {
  Vector4 _MainTex_ST at 48
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ProjectionParams at 80
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
}
Constant Buffer "UnityPerFrame" (384 bytes) on slot 3 {
  Matrix4x4 unity_MatrixV at 144
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[4], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[4], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xyzw
      dcl_input v2.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_output o3.xyzw
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r0.xyzw, r0.xyzw, cb2[3].xyzw
   4: mul r1.xyzw, r0.yyyy, cb3[18].xyzw
   5: mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
   6: mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
   7: mad r1.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
   8: mov o0.xyzw, r1.xyzw
   9: mov o1.xyzw, v1.xyzw
  10: mad o2.xy, v2.xyxx, cb0[3].xyxx, cb0[3].zwzz
  11: mul r0.y, r0.y, cb3[10].z
  12: mad r0.x, cb3[9].z, r0.x, r0.y
  13: mad r0.x, cb3[11].z, r0.z, r0.x
  14: mad r0.x, cb3[12].z, r0.w, r0.x
  15: mov o3.z, -r0.x
  16: mul r0.x, r1.y, cb1[5].x
  17: mul r0.w, r0.x, l(0.500000)
  18: mul r0.xz, r1.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
  19: mov o3.w, r1.w
  20: add o3.xy, r0.zzzz, r0.xwxx
  21: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 8 math, 2 temp registers, 2 textures
Set 2D Texture "_CameraDepthTexture" to slot 0 sampler slot 1
Set 2D Texture "_MainTex" to slot 1 sampler slot 0

Constant Buffer "$Globals" (80 bytes) on slot 0 {
  Float _InvFade at 64
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ZBufferParams at 112
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[8], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_input_ps linear v3.xyzw
      dcl_output o0.xyzw
      dcl_temps 2
   0: div r0.xy, v3.xyxx, v3.wwww
   1: sample r0.xyzw, r0.xyxx, t0.xyzw, s1
   2: mad r0.x, cb1[7].z, r0.x, cb1[7].w
   3: div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
   4: add r0.x, r0.x, -v3.z
   5: mul_sat r0.x, r0.x, cb0[4].x
   6: mul r0.w, r0.x, v1.w
   7: sample r1.xyzw, v2.xyxx, t1.xyzw, s0
   8: mov r0.xyz, v1.xyzx
   9: mul r1.xyzw, r0.xyzw, r1.xyzw
  10: mul o0.xyzw, r0.wwww, r1.xyzw
  11: ret 
// Approximately 0 instruction slots used


 }
}
}